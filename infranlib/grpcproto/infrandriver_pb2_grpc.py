# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpcproto import infrandriver_pb2 as grpcproto_dot_infrandriver__pb2


class DriverInfranFaceIDStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.IdentifyOne = channel.unary_unary(
                '/driverinfran.DriverInfranFaceID/IdentifyOne',
                request_serializer=grpcproto_dot_infrandriver__pb2.IdentifyOneRequest.SerializeToString,
                response_deserializer=grpcproto_dot_infrandriver__pb2.IdentifyOneResponse.FromString,
                )
        self.IdentifyMany = channel.unary_unary(
                '/driverinfran.DriverInfranFaceID/IdentifyMany',
                request_serializer=grpcproto_dot_infrandriver__pb2.IdentifyManyRequest.SerializeToString,
                response_deserializer=grpcproto_dot_infrandriver__pb2.IdentifyManyResponse.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/driverinfran.DriverInfranFaceID/RegisterUser',
                request_serializer=grpcproto_dot_infrandriver__pb2.RegisterUserRequest.SerializeToString,
                response_deserializer=grpcproto_dot_infrandriver__pb2.RegisterUserResponse.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/driverinfran.DriverInfranFaceID/DeleteUser',
                request_serializer=grpcproto_dot_infrandriver__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=grpcproto_dot_infrandriver__pb2.DeleteUserResponse.FromString,
                )
        self.VerifyById = channel.unary_unary(
                '/driverinfran.DriverInfranFaceID/VerifyById',
                request_serializer=grpcproto_dot_infrandriver__pb2.VerifyByIdRequest.SerializeToString,
                response_deserializer=grpcproto_dot_infrandriver__pb2.VerifyResponse.FromString,
                )
        self.VerifyByImage = channel.unary_unary(
                '/driverinfran.DriverInfranFaceID/VerifyByImage',
                request_serializer=grpcproto_dot_infrandriver__pb2.VerifyByImageRequest.SerializeToString,
                response_deserializer=grpcproto_dot_infrandriver__pb2.VerifyResponse.FromString,
                )


class DriverInfranFaceIDServicer(object):
    """Missing associated documentation comment in .proto file."""

    def IdentifyOne(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IdentifyMany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyByImage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverInfranFaceIDServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'IdentifyOne': grpc.unary_unary_rpc_method_handler(
                    servicer.IdentifyOne,
                    request_deserializer=grpcproto_dot_infrandriver__pb2.IdentifyOneRequest.FromString,
                    response_serializer=grpcproto_dot_infrandriver__pb2.IdentifyOneResponse.SerializeToString,
            ),
            'IdentifyMany': grpc.unary_unary_rpc_method_handler(
                    servicer.IdentifyMany,
                    request_deserializer=grpcproto_dot_infrandriver__pb2.IdentifyManyRequest.FromString,
                    response_serializer=grpcproto_dot_infrandriver__pb2.IdentifyManyResponse.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=grpcproto_dot_infrandriver__pb2.RegisterUserRequest.FromString,
                    response_serializer=grpcproto_dot_infrandriver__pb2.RegisterUserResponse.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=grpcproto_dot_infrandriver__pb2.DeleteUserRequest.FromString,
                    response_serializer=grpcproto_dot_infrandriver__pb2.DeleteUserResponse.SerializeToString,
            ),
            'VerifyById': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyById,
                    request_deserializer=grpcproto_dot_infrandriver__pb2.VerifyByIdRequest.FromString,
                    response_serializer=grpcproto_dot_infrandriver__pb2.VerifyResponse.SerializeToString,
            ),
            'VerifyByImage': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyByImage,
                    request_deserializer=grpcproto_dot_infrandriver__pb2.VerifyByImageRequest.FromString,
                    response_serializer=grpcproto_dot_infrandriver__pb2.VerifyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'driverinfran.DriverInfranFaceID', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DriverInfranFaceID(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def IdentifyOne(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driverinfran.DriverInfranFaceID/IdentifyOne',
            grpcproto_dot_infrandriver__pb2.IdentifyOneRequest.SerializeToString,
            grpcproto_dot_infrandriver__pb2.IdentifyOneResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IdentifyMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driverinfran.DriverInfranFaceID/IdentifyMany',
            grpcproto_dot_infrandriver__pb2.IdentifyManyRequest.SerializeToString,
            grpcproto_dot_infrandriver__pb2.IdentifyManyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driverinfran.DriverInfranFaceID/RegisterUser',
            grpcproto_dot_infrandriver__pb2.RegisterUserRequest.SerializeToString,
            grpcproto_dot_infrandriver__pb2.RegisterUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driverinfran.DriverInfranFaceID/DeleteUser',
            grpcproto_dot_infrandriver__pb2.DeleteUserRequest.SerializeToString,
            grpcproto_dot_infrandriver__pb2.DeleteUserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driverinfran.DriverInfranFaceID/VerifyById',
            grpcproto_dot_infrandriver__pb2.VerifyByIdRequest.SerializeToString,
            grpcproto_dot_infrandriver__pb2.VerifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyByImage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driverinfran.DriverInfranFaceID/VerifyByImage',
            grpcproto_dot_infrandriver__pb2.VerifyByImageRequest.SerializeToString,
            grpcproto_dot_infrandriver__pb2.VerifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
